download.file("https://www.kaggle.com/c/titanic/download/train.csv","train.csv")
if (!file.exists("test.csv"))
download.file("https://www.kaggle.com/c/titanic/download/test.csv","test.csv")
train<-read.csv("train.csv")
test<-read.csv("test.csv")
names(train)
names(test)
test$Survived<-rep(NA,dim(test)[1])
total<-rbind(train,test)
str(total)
missingRate<-function(x)
{if (is.character(x))
{round(sum(x=="")/length(x)*100,3)}
else
{round(sum(is.na(x))/length(x)*100,3)}
}
missing<-sapply(total,missingRate)%>% data.frame()
names(missing)<-"missingRate"
missing$column<-rownames(missing)
rownames(missing)<-1:nrow(missing)
g<-ggplot(data.frame(missing),aes(x=reorder(column,missingRate),y=missingRate,fill=column))+geom_bar(stat="identity")+coord_flip(ylim=c(0,100))+geom_text(aes(label=missingRate),nudge_y=3)
g
total$Age<-knnImputation(total[,-2])$Age
missingIndex<-which(total$Embarked=="")
total[missingIndex,]$Embarked<-NA
total$Embarked<-knnImputation(total[,-2])$Embarked
total$Fare<-knnImputation(total[,-2])$Fare
total$Survived<-as.factor(total$Survived)
train$Survived<-as.factor(train$Survived)
dim(total)
n=nrow(train)
train<-total[1:n,]
table(total$Pclass)
ggplot(train,aes(Pclass,fill=Survived))+geom_bar(position="fill")
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
table(total$Sex)
quantile(total$Age)
ggplot(train,aes(Sex,fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(cut2(Age,18),fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(SibSp,fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(Parch,fill=Survived))+geom_bar(position="fill")
str(total$Ticket)
tnum<-table(total$Ticket)
TicketType<-function(x){
ifelse(tnum[x]>1,"Shared","Single")
}
total$TicketType<-as.factor(sapply(as.character(total$Ticket),TicketType))
quantile(total$Fare)
ggplot(train,aes(cut2(Fare,g=4),fill=Survived))+geom_bar(position="fill")
table(total$Embarked)
ggplot(train,aes(Embarked,fill=Survived))+geom_bar(position="fill")
n=nrow(train)
train<-total[1:n,]
test<-total[-(1:n),]
traincontrol<-trainControl(method="repeatedcv")
traindata<-train[,-c(1,4,9,11)]
modFit<-train(as.factor(Survived)~.,data=traindata,method="rf",trControl=traincontrol)
modFit2<-train(as.factor(Survived)~.,data=traindata,method="rpart",trControl=traincontrol)
modFit3<-train(as.factor(Survived)~.,data=traindata,method="gbm",trControl=traincontrol,verbose=FALSE)
modFit
modFit2
modFit3
test$Survived<-predict(modFit,test)
write.csv(test[,1:2],"result1.csv",row.names = FALSE)
test$Survived<-predict(modFit3,test)
write.csv(test[,1:2],"result3.csv",row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
n=nrow(train)
train<-total[1:n,]
test<-total[-(1:n),]
traincontrol<-trainControl(method="repeatedcv")
traindata<-train[,-c(1,4,9,11)]
modFit<-train(as.factor(Survived)~.,data=traindata,method="rf",trControl=traincontrol)
modFit2<-train(as.factor(Survived)~.,data=traindata,method="rpart",trControl=traincontrol)
modFit3<-train(as.factor(Survived)~.,data=traindata,method="gbm",trControl=traincontrol,verbose=FALSE)
modFit
modFit2
modFit3
test$Survived<-predict(modFit,test)
write.csv(test[,1:2],"result1.csv",row.names = FALSE)
test$Survived<-predict(modFit2,test)
write.csv(test[,1:2],"result2.csv",row.names = FALSE)
test$Survived<-predict(modFit3,test)
table(test$Survived)
write.csv(test[,1:2],"result3.csv",row.names = FALSE)
head(train)
strsplit(train$Name[1],"[,.]")
train$Name[1]
strsplit(as.character(train$Name[1]),"[,.]")
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
surname<-function(x){
strsplit(x,"[,.]")[[1]][1]
}
total$surname<-sapply(as.character(total$Name),title)
table(total$surname)
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
surname<-function(x){
strsplit(x,"[,.]")[[1]][1]
}
total$surname<-sapply(as.character(total$Name),surname)
table(total$surname)
n=nrow(train)
train<-total[1:n,]
test<-total[-(1:n),]
traincontrol<-trainControl(method="repeatedcv")
traindata<-train[,-c(1,4,9,11)]
modFit<-train(as.factor(Survived)~.,data=traindata,method="rf",trControl=traincontrol)
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
surname<-function(x){
strsplit(x,"[,.]")[[1]][1]
}
total$surname<-sapply(as.character(total$Name),surname)
tsurname<-table(total$surname)
total$surname<-sapply(total$surname,function(x){if(tsurname$x<=2) small})
length(tsurname)
tsurname[1]
tsurname$Abbing
tsurname["Abbing"]
tsurname[Abbing]
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
surname<-function(x){
strsplit(x,"[,.]")[[1]][1]
}
total$surname<-sapply(as.character(total$Name),surname)
tsurname<-table(total$surname)
total$surname<-sapply(total$surname,function(x){if(tsurname[x]<=2) small})
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
surname<-function(x){
strsplit(x,"[,.]")[[1]][1]
}
total$surname<-sapply(as.character(total$Name),surname)
tsurname<-table(total$surname)
total$surname<-sapply(total$surname,function(x){if(tsurname[x]<=2) "small"})
table(total$surname)
?ifelse
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
surname<-function(x){
strsplit(x,"[,.]")[[1]][1]
}
total$surname<-sapply(as.character(total$Name),surname)
tsurname<-table(total$surname)
total$surname<-sapply(total$surname,function(x){ifelse(tsurname[x]<=2,"small",x)})
table(total$surname)
n=nrow(train)
train<-total[1:n,]
test<-total[-(1:n),]
traincontrol<-trainControl(method="repeatedcv")
traindata<-train[,-c(1,4,9,11)]
modFit<-train(as.factor(Survived)~.,data=traindata,method="rf",trControl=traincontrol)
modFit2<-train(as.factor(Survived)~.,data=traindata,method="rpart",trControl=traincontrol)
modFit3<-train(as.factor(Survived)~.,data=traindata,method="gbm",trControl=traincontrol,verbose=FALSE)
modFit4<-train(as.factor(Survived)~.,data=traindata,method="nb",trControl=traincontrol)
modFit
modFit2
modFit3
modFit4
test$Survived<-predict(modFit,test)
table(total$surname)
table(test$surname)
swirl()
library(swirl)
swirl()
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
svd1$d
svd1$u
dim(svd1$d)
svd1$d
svd1$d[1]
a1<-(svd1$u[,1]*svd1$d[1])
a1
dim(a1)
a1<-(svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1]
)
myImage(a1)
a2<-(svd1$u[,1:2]*svd1$d[1:2])%*%t(svd1$v[,1:2]
)
a2<-(svd1$u[,1:2]*svd1$d[1:2])%*%t(svd1$v[,1:2])
svd1$d[1:2]
diag(svd1$d[1:2])
a2<-(svd1$u[,1:2]*diag(svd1$d[1:2]))%*%t(svd1$v[,1:2])
a2<-(svd1$u[,1:2]%*%diag(svd1$d[1:2]))%*%t(svd1$v[,1:2])
a2<-svd1$u[,1:2] %*% diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
a5<-svd1$u[,1:5] %*% diag(svd1$d[1:5])%*%t(svd1$v[,1:5])
myImage(a5)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
dist(dataFrame)
hc<_hcluster(distxy)
hc<-hcluster(distxy)
hc<-hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
rm(lis=ls())
rm(list=ls())
library(shiny)
library(ggplot2)
library(maps)
library(RColorBrewer)
world_map<-map_data("world")
world_map<-map_data("world")
world_map$region<-factor(world_map$region)
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)))
g
g+labs(fill="")
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.factor(as.numeric(region))))
g
g
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)))
g
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)),
colour="grey",size=.25)
g
g<- g + coord_map("ortho",orientation=c(45,130,130))
g
g<- g + coord_map("ortho",orientation=c(45,130,130))
g
library(grid)
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)),
colour="grey",size=.25)
g<- g + coord_map("ortho",orientation=c(45,130,130))
g
install.packages("mapproj")
g<- g + coord_map("ortho",orientation=c(45,130,130))
g
g<- g + scale_y_continuous(breaks=(-6:6)*15)
+ scale_x_continuous(breaks=(-12:12)*15)
g<- g + scale_y_continuous(breaks=(-6:6)*15) + scale_x_continuous(breaks=(-12:12)*15)
g
g<-g+scale_fill_brewer(name="million($)",palette=input$var1)
g<-g+scale_fill_brewer(name="million($)",palette="PiYG")
g
g<- g + theme(
panel.background=element_rect(fill="white",colour=NA),
panel.grid.major = element_line(colour = "grey60",size=.25),
panel.grid.minor = element_line(colour = "grey60",size=.25),
axis.text=element_blank(),
axis.title=element_blank(),
axis.ticks=element_blank())
g
g
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
g<- ggplot()
g<- g + geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)),
colour="grey",size=.25)
g
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
g<- ggplot() + geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)),
colour="grey",size=.25)
g
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
head(world_map)
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
?scale_fill_brewer
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
(d <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)))
d + scale_colour_brewer()
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
head()
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C9Week1/random')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C9Week1/random')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C9Week1/random')
iris
?select
library(tidyverse)
?select
iris[1:5,] %>% select(SL=Sepal.Length)
iris[1:5,] %>% select(SL=Sepal.Length,SW=Sepal.Width,A=ABC)
iris[1:5,] %>% select(SL=Sepal.Length,SW=Sepal.Width,A)
iris[1:5,] %>% select(c(SL,SW)=c(Sepal.Length,Sepal.Width))
iris[1:5,] %>% select(SL=Sepal.Length,SW=Sepal.Width,A=)
s="SL=Sepal.Length"
iris[1:5,] %>% select(s)
iris[1:5,] %>% select("Sepal.Length")
s=list("Sepal.Length","Sepal.Width")
iris[1:5,] %>% select(s)
s=c("Sepal.Length","Sepal.Width")
iris[1:5,] %>% select(s)
s=c("Sepal.Length","Sepal.Width","A")
iris[1:5,] %>% select(s)
s=c("Sepal.Width","Sepal.Length","A")
s=c("Sepal.Width","Sepal.Length")
iris[1:5,] %>% select(s)
iris[1:5,]$a
iris[1:5,]$a<-iris[1:5,]$a
iris[1:5,]
abc<-iris[1:5,]
abc
colnames(a)<-letters[1:9]
colnames(abc)<-letters[1:9]
c<-repeat(c(True,FALSE,TRUE),3)
c<-rep(c(True,FALSE,TRUE),3)
c<-rep(c(TRUE,FALSE,TRUE),3)
letters[c]
c
letters[1:9][c]
a
s
s %in% colnames(iris)
s
s<-c(s,"ABC")
s
s %in% colnames(iris)
con<-s %in% colnames(iris)
s[con]
sapply(s[con], function(x) abc$x=iris$x)
abc
sapply(s[con], function(x) ab$x=iris$x)
ab<=data.frame
ab<-data.frame()
ab
sapply(s[con], function(x) ab$x=iris$x)
iris$s[1]
sapply(s[con], function(x) ab[,x]=iris[,x])
shiny::runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
install.packages("shinydashboardPlus")
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
shiny::runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/MI_ECHO_EXTRACTION 2')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/TAC_ECHO_EXTRACTION 2')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/MI_ECHO_EXTRACTION 2')
a=c("a","b","c","d","e","f","g")
LETTER[1:7]
LETTERS[1:7]
names(a)=LETTERS[1:7]
a
a$A
a$"A"
a["A","B"]
a["A"]
a[c("A","B")]
a[LETTERS[1:4]]
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/MI_ECHO_EXTRACTION 2')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/MI_ECHO_EXTRACTION 2')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/MI_ECHO_EXTRACTION 2')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/MI_ECHO_EXTRACTION 2')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/MI_ECHO_EXTRACTION 2')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/TAC_ECHO_EXTRACTION 2')
getwd()
setwd("../Desktop/Rdata/testEchoData/")
data <- read.csv("TAC33.csv",col.names = 1:15,header=FALSE,stringsAsFactors = FALSE)
# capture the analysis by LV trace, mainly the Long axis and short axis systolic function
index1<-grep("^LV Trace$",data[,1])
# caputure the analysis by velocity and time, mainly the diastolic function
index2<-grep("Velocity|Time",data[,3])
# same as above
index3<-grep("none",data[,3])
# subset data
data1<-data[index1,c(2,3,5)]
data2<-data[index2,c(1,3,5)]
data3<-data[index3,c(1,3,4)]
# create the label by series
label_index<-grep("Series Name",data[,1])
label<-as.character(data[label_index,2])
# create the ID by animal ID
ID_index<-grep("Animal ID",data[,1])
ID<-as.character(data[ID_index,2])
# count the number of parameter for each analysis
grouping1<-cut(index1,breaks = c(label_index,nrow(data)))
reptimes1<-table(grouping1)
# same as above
grouping2<-cut(index2,breaks = c(label_index,nrow(data)))
reptimes2<-table(grouping2)
# same as above
grouping3<-cut(index3,breaks = c(label_index,nrow(data)))
reptimes3<-table(grouping3)
# tally up the labels and ID for each subset
data1$labels<-rep(label,reptimes1)
data1$ID<-rep(ID,reptimes1)
data2$labels<-rep(label,reptimes2)
data2$ID<-rep(ID,reptimes2)
data3$labels<-rep(label,reptimes3)
data3$ID<-rep(ID,reptimes3)
# tally up the parameter name
data1$measurement<-with(data1,paste(sapply(X2,function(x) strsplit(x,"-")[[1]][1]),X3,sep="-"))
data2$measurement<-data2$X1
data3$measurement<-data3$X1
# combine subsets
colnames(data3)<-colnames(data2)
data2<-rbind(data2,data3)
colnames(data2)<-colnames(data1)
data1<-rbind(data1,data2)
# define row names
names(data1)<-c("label","parameter","value","labels","ID","measurement")
# keep 3 decimal places
data1$value<-round(as.numeric(data1$value),3)
# change from long format to wide format
data4<-data1[3:6] %>% spread(measurement,value)
names(data4)<-str_remove_all(names(data4),"[ ;-]")
if (!is_empty(data4))
{s=c("ID","labels","BHeartRate","BVolumes","BVolumed","BStrokeVolume","BEjectionFraction",
"BFractionalShortening","BCardiacOutput","MDiameters","Mdiameterd","MVolumes",
"MVolumed","MStrokeVolume","MEjectionFraction","MFractionalShortening",
"MLVMassCor","MCardiacOutput","MVE","MVA","E'","A'","MVE/A","MVE/E'","LCCAPSV","RCCAPSV")
s=c("ID","labels","BHeartRate","BVolumes","BVolumed","BStrokeVolume","BEjectionFraction",
"BFractionalShortening","BCardiacOutput","MDiameters","Mdiameterd","MVolumes",
"MVolumed","MStrokeVolume","MEjectionFraction","MFractionalShortening",
"MLVMassCor","MCardiacOutput","MVE","MVA","E'","A'","MVE/A","MVE/E'","LCCAPSV","RCCAPSV")
s[s%in%colnames(data4)]
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/TAC_ECHO_EXTRACTION 2')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/MI_ECHO_EXTRACTION 2')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/R-for-Work/TAC_ECHO_EXTRACTION 2')
